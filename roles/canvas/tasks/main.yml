#1 pre-installation
- name: Create User for Canvas
  shell: adduser --disabled-password --gecos canvas canvas
    
- name: rm -rf /data/wwwroot/canvas for second installation
  shell: rm -rf /data/wwwroot/canvas
  
- name: Download canvas
  unarchive:
    src: "{{canvas_download_url}}"
    dest: "/data/wwwroot"
    remote_src: yes
    mode: 0750
    
- name: Rename dir name
  shell: cd /data/wwwroot; if [ ! -d "canvas" ]; then mv *instructure-canvas-lms* canvas; fi

# Database create user and db
- name: Create postgresql_user:canvas and Build postgresql_database:canvas_production
  shell: | 
    chown -R canvas:postgres /data/wwwroot/canvas
    sudo -u postgres createuser canvas --no-createdb --no-superuser --no-createrole
    echo "ALTER USER canvas WITH PASSWORD '{{canvas_postgresql_password}}';\q" | sudo -u postgres psql
    sudo -u postgres createdb canvas_production --owner=canvas
    sudo -u postgres createuser $USER
    sudo -u postgres psql -c "alter user $USER with superuser" postgres

# Install dependencies by OS_family
- name: Install this role on {{ansible_os_family}}
  include: "{{ansible_os_family}}.yml"

# Install Canvas
- name: Install Canvas dependencies and rename configuration file
  shell: |
    bundle install --path vendor/bundle
    for config in amazon_s3 database \
    delayed_jobs domain file_store outgoing_mail security external_migration; \
    do cp config/$config.yml.example config/$config.yml; done
    cp config/dynamic_settings.yml.example config/dynamic_settings.yml
    cp config/database.yml.example config/database.yml
    cp config/outgoing_mail.yml.example config/outgoing_mail.yml
    cp config/domain.yml.example config/domain.yml
    cp config/security.yml.example config/security.yml
  args:
    chdir: /data/wwwroot/canvas

- name: Create canvas assets 
  shell: |
    mkdir -p log tmp/pids public/assets app/stylesheets/brandable_css_brands
    touch app/stylesheets/_brandable_variables_defaults_autogenerated.scss
    touch Gemfile.lock
    touch log/production.log
    chown -R canvas config/environment.rb log tmp public/assets \
    app/stylesheets/_brandable_variables_defaults_autogenerated.scss \
    app/stylesheets/brandable_css_brands Gemfile.lock config.ru
    yarn install
    RAILS_ENV=production bundle exec rake canvas:compile_assets
    chown -R canvas public/dist/brandable_css 
  args:
    chdir: /data/wwwroot/canvas
    
# Set database connection and import meta data    
- name: Set database connection
  shell: | 
    sed -i '18,25s/password: your_password/password: {{canvas_postgresql_password}}/' /data/wwwroot/canvas/config/database.yml
    
- name: postgresql initialization & Set login_email, login_password,user
  shell: |
    export RAILS_ENV=production
    export CANVAS_LMS_ADMIN_EMAIL={{canvas_admin_email}}
    export CANVAS_LMS_ADMIN_PASSWORD={{canvas_password}}
    export CANVAS_LMS_ACCOUNT_NAME={{canvas_accout_name}}
    export CANVAS_LMS_STATS_COLLECTION={{cnavas_stats_collection}}
    bundle exec rake db:initial_setup
  args:
    chdir: /data/wwwroot/canvas

# Canvas ownership
- name: Set Canvas ownership and Set
  shell: |
    chown canvas config/*.yml
    sudo chmod 640 config/*.yml
    setfacl -m u:www-data:rx -R /data/wwwroot/canvas
  args:
    chdir: /data/wwwroot/canvas

# Apache Configure
- name: Copy VirtualHosts file with owner and permissions
  copy:
    src:  canvas.conf
    dest: /etc/httpd/conf.d/vhost.conf

- name: Restart Apache
  service:
    name: apache
    state: restarted
    enabled: yes
    
# Optimizing File Downloads
- name: Set mod_xsendfile for optimizing file downloads
  copy:
    src:  production-local.rb
    dest: /data/wwwroot/canvas/config/environments/production-local.rb

# Cache configuration
- name: Set Redis of Cache configuration
  shell: |
    cp config/cache_store.yml.example config/cache_store.yml
    cp config/redis.yml.example config/redis.yml
    chown canvas config/*.yml
  args:
    chdir: /data/wwwroot/canvas

# Install QTIMigrationTool
- name: Install QTIMigrationTool 
  shell: |
    cd /data/wwwroot/canvas/vendor
    git clone https://github.com/instructure/QTIMigrationTool.git QTIMigrationTool
    cd QTIMigrationTool
    chmod +x migrate.py

# Automated jobs
- block:
  - name: Copy canvas_init.service file
    copy:
      src: canvas_init.service
      dest: '/lib/systemd/system/canvas_init.service'

  - name: Start and enable canvas_init.service
    service:
      name: canvas_init
      state: restarted
      enabled: yes

# Check version and service state
- block:
  - name: Check Canvas Version
    shell: sudo sh -c "echo 'no method for canvas version' 1>> /data/logs/install_version.txt"

  - name: Check canvas_init Service
    shell: systemctl status canvas_init | grep Active*
    register: check_canvas_init_service
    notify: check_canvas_init_service
